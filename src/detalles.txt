1. task : "Tell me the name of the person in the kitchen"

>>class PepperRobot:
    def __init__(self):
        self.tm = task_module.Task_module(perception=True, speech=True, manipulation=True, navigation=True)
        self.object_found = False
        self.navigation_status = ""

    def go_to_living_room(self):
        rospy.loginfo("Going to the living room...")
        self.tm.go_to_place("living_room")
        while self.navigation_status != "arrived":
            time.sleep(1)
        rospy.loginfo("Arrived at the living room.")

    def spin_until_person_found(self):
        rospy.loginfo("Spinning until a person is found...")
        self.tm.turn_camera("front_camera", "enable")
        self.tm.start_recognition("front_camera")
        self.tm.look_for_object("person", False)
        while not self.object_found:
            self.tm.spin_srv(30)
            time.sleep(1)
        rospy.loginfo("Person found.")

    def greet_person(self):
        rospy.loginfo("Greeting the person...")
        self.tm.talk("Hello! How are you?")
        rospy.loginfo("Greeting complete.")

    def ask_person_to_follow(self):
        rospy.loginfo("Asking the person to follow...")
        self.tm.talk("Please follow me to the kitchen.")
        rospy.loginfo("Asking complete.")

    def go_to_kitchen(self):
        rospy.loginfo("Going to the kitchen...")
        self.tm.go_to_place("kitchen")
        while self.navigation_status != "arrived":
            time.sleep(1)
        rospy.loginfo("Arrived at the kitchen.")

    def complete_task(self):
        self.go_to_living_room()
        self.spin_until_person_found()
        self.greet_person()
        self.ask_person_to_follow()
        self.go_to_kitchen()

pepper = PepperRobot()
pepper.complete_task()
felipe@victus:~/sinfonia_ws/src/task_utilities/src/code_generation$ /bin/python3 /home/felipe/sinfonia_ws/src/task_utilities/src/code_generation/generate.py
# Initialize the perception services
self.tm.turn_camera("front_camera", "enable")
self.tm.start_recognition("front_camera")

# Look for the person in the kitchen
self.tm.look_for_object("person", False)

# Wait for the person to be found
found = self.tm.wait_for_object(30)

if found:
    # Get the name of the person
    name = self.tm.recognize_face()
    print("The name of the person in the kitchen is:", name)
else:
    print("No person found in the kitchen")

# Disable the perception services
self.tm.turn_camera("front_camera", "disable")
self.tm.start_recognition("")

-asume que empieza en la cocina (error)
-para obtener el name estÃ¡ prendiendo un recognize face cuando deberia prender q_a de speech y guardar el nombre
-No hace el talk para comunicar cual es el nombre de la persona de la cocina

2. task : "Follow Linda from the exit to the kitchen"
>># Follow Linda from the exit to the kitchen

# Turn on the front camera
self.tm.turn_camera("front_camera", "enable")

# Start recognition for the front camera
self.tm.start_recognition("front_camera")

# Look for Linda
self.tm.look_for_object("person", False)

# Wait for Linda to be found
self.tm.wait_for_object(-1)

# Stop recognition for the front camera
self.tm.start_recognition("front_camera")

# Go to the kitchen
self.tm.go_to_place("kitchen")

# Turn off the front camera
self.tm.turn_camera("front_camera", "disable")

-no inicializa el modulo tm
-entiende de la task reconocer a linda y luego ir a la cocina. 

3."Identify and save the face of the people available in kitchen and living-room location"

living_room_faces = []

# Turn on the front camera
self.tm.turn_camera("front_camera", "enable")

# Start face recognition for the front camera
self.tm.start_recognition("front_camera")

# Wait for the face recognition to start
time.sleep(2)

# Look for faces in the kitchen
self.tm.set_current_place("kitchen")
self.tm.look_for_object("person", False)

# Wait for the object to be found
if self.tm.wait_for_object(10):
    # Save the face of the person in the kitchen
    self.tm.save_face("kitchen_person")
    kitchen_faces.append("kitchen_person")

# Look for faces in the living room
self.tm.set_current_place("living_room")
self.tm.look_for_object("person", False)

# Wait for the object to be found
if self.tm.wait_for_object(10):
    # Save the face of the person in the living room
    self.tm.save_face("living_room_person")
    living_room_faces.append("living_room_person")

# Turn off the front camera
self.tm.turn_camera("front_camera", "disable")

# Print the saved faces
print("Kitchen Faces:", kitchen_faces)
print("Living Room Faces:", living_room_faces)


